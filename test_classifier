from keras.preprocessing.image import ImageDataGenerator 
import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.applications import VGG16
from keras.applications.vgg16 import preprocess_input

num_classes = 2

image_resize = 224

batch_size_training = 100
batch_size_validation = 100

data_generator = ImageDataGenerator(
    preprocessing_function=preprocess_input,
)

validation_generator = data_generator.flow_from_directory(
    '##',
    target_size=(image_resize, image_resize),
    batch_size=batch_size_validation,
    class_mode='categorical')

model = Sequential()

model.add(VGG16(
    include_top=False,
    pooling='avg',
    weights='imagenet',
    ))

model.add(Dense(num_classes, activation='softmax'))




model.layers

model.layers[0].trainable = False

model.summary()

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

steps_per_epoch_training = len(train_generator)
steps_per_epoch_validation = len(validation_generator)
num_epochs = 2

fit_history = model.fit_generator(
    train_generator,

    steps_per_epoch=steps_per_epoch_training,
    epochs=num_epochs,
    validation_data=validation_generator,
    validation_steps=steps_per_epoch_validation,
    verbose=1,
)

model.save('classifier_vgg_model.h5')

from keras.models import load_model
resnet_model=load_model('classifier_resnet_model.h5')
vgg16_model=load_model('classifier_vgg_model.h5')

data_generator_test = ImageDataGenerator()

test_generator = data_generator_test.flow_from_directory(
    'concrete_data_week4/test',
    target_size=(image_resize, image_resize),
    shuffle=False)

score_vgg16 = vgg16_model.evaluate_generator(test_generator, verbose=1)
print("loss:", score_vgg16[0])
print("accuracy:", score_vgg16[1])

score_resnet = resnet_model.evaluate_generator(test_generator, verbose=1)
print("loss:", score_resnet[0])
print("accuracy:", score_resnet[1])

